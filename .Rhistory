ƒçkmkljklj
demo()
devtools::install_git("https://gitlab.inria.fr/gdurif/pCMF", subdir="pkg")
install.packages("devtools")
devtools::install_git("https://gitlab.inria.fr/gdurif/pCMF", subdir="pkg")
install.packages("Rtools")
devtools::install_git("https://gitlab.inria.fr/gdurif/pCMF", subdir="pkg")
library(pCMF)
installed.packages(lib.loc = NULL, priority = NULL, noCache = FALSE, fields = NULL, subarch = .Platform$r_arch)
remove.packages("pCMF")
klsdkls
R.home()
help()
installed.packages(lib.loc = NULL, priority = NULL, noCache = FALSE, fields = NULL, subarch = .Platform$r_arch)
installed.packages(lib.loc = NULL, priority = NULL, noCache = FALSE, fields = NULL, subarch = .Platform$r_arch)
library(pCMF)
remove.packages('pCMF')
remove.packages('pCMF')
remove.packages("pCMF")
uninstall.packages('pCMF')
uninstall.packages("pCMF")
library('pCMF')
library('pCMF')
maxCords <- matxMax(fat)
## generate data
n <- 100
p <- 200
K <- 10
factorU <- generate_factor_matrix(n, K, ngroup=3, average_signal=60,
group_separation=0.8,
distribution="gamma",
shuffle_feature=TRUE)
factorV <- generate_factor_matrix(p, K, ngroup=2, average_signal=60,
group_separation=0.8,
distribution="gamma",
shuffle_feature=TRUE,
prop_noise_feature=0.4,
noise_level=0.5)
U <- factorU$factor_matrix
U <- factorU$factor_matrix
factorV <- generate_factor_matrix(p, K, ngroup=2, average_signal=60,
group_separation=0.8,
distribution="gamma",
shuffle_feature=TRUE,
prop_noise_feature=0.4,
noise_level=0.5)
U <- factorU$factor_matrix
## generate data
n <- 100
p <- 200
K <- 10
factorU <- generate_factor_matrix(n, K, ngroup=3, average_signal=60,
group_separation=0.8,
distribution="gamma",
shuffle_feature=TRUE)
## generate data
library("pCMF")
n <- 100
p <- 200
K <- 10
factorU <- generate_factor_matrix(n, K, ngroup=3, average_signal=60,
group_separation=0.8,
distribution="gamma",
shuffle_feature=TRUE)
factorV <- generate_factor_matrix(p, K, ngroup=2, average_signal=60,
group_separation=0.8,
distribution="gamma",
shuffle_feature=TRUE,
prop_noise_feature=0.4,
noise_level=0.5)
U <- factorU$factor_matrix
V <- factorV$factor_matrix
count_data <- generate_count_matrix(n, p, K, U, V,
ZI=TRUE, prob1=rep(0.5,p))
X <- count_data$X
dat <- read.csv(file="C:\\Users\\Gasper\\Documents\\Faks\\3. Letnik\\2. semester\\DS\\orange-imputation-module\\data\\ccp_normCounts_mESCquartz.counts.cycle_genes.csv", header = TRUE)
fat <- as.matrix(dat[-c(1, 2), ])
storage.mode(fat) <- "integer"
class(fat[1])
rownames(fat) <- c(seq(1, nrow(fat)))
colnames(fat) <- NULL
maxCords <- matxMax(fat)
maxCords <- mat(fat)
maxCords <- max(fat)
maxCords <- max(fat)
maxCords
maxCords <- max(X)
maxCords <- max(fat)
fat[!complete.cases(fat),]
t <- fat[!complete.cases(fat),]
View(t)
View(t)
View(fat)
View(fat)
View(t)
View(fat)
fat <- fat[,-1]
View(fat)
View(fat)
fat <- fat[,-1]
fat <- fat[,-1]
fat <- na.omit(fat)
View(fat)
dat <- read.csv(file="C:\\Users\\Gasper\\Documents\\Faks\\3. Letnik\\2. semester\\DS\\orange-imputation-module\\data\\ccp_normCounts_mESCquartz.counts.cycle_genes.csv", header = TRUE)
View(dat)
dat <- dat[,-1]
View(dat)
dat <- dat[,-c("cycleStageName")]
dat <- dat[,-which(names(dat) %in% c("cycleStageName"))]
fat <- as.matrix(dat[-c(1, 2), ])
storage.mode(fat) <- "integer"
class(fat[1])
rownames(fat) <- c(seq(1, nrow(fat)))
colnames(fat) <- NULL
maxCords <- max(fat)
maxCords <- max(dat)
maxCords <- max(dat)
maxCords <- max(fat)
class(fat[1])
colnames(fat) <- NULL
maxCords <- max(fat)
t <- fat[!complete.cases(fat),]
t <- fat[!complete.cases(dat),]
f
t <- fat[!complete.cases(fat),]
View(t)
maxCords <- max(fat)
maxCords <- max(dat)
maxCords <- max(X)
t <- fat[!complete.cases(fat),]
#fat <- fat[,-1]
#fat <- na.omit(fat)
## run pCMF algorithm
res1 <- pCMF(fat, K=2, verbose=FALSE, zero_inflation = FALSE,
sparsity = FALSE, ncores=8)
library(testthat)
install.packages('testthat')
install.packages("testthat")
library("testthat")
test_check("pCMF")
## generate data
library("pCMF")
n <- 100
p <- 200
K <- 10
factorU <- generate_factor_matrix(n, K, ngroup=3, average_signal=60,
group_separation=0.8,
distribution="gamma",
shuffle_feature=TRUE)
factorV <- generate_factor_matrix(p, K, ngroup=2, average_signal=60,
group_separation=0.8,
distribution="gamma",
shuffle_feature=TRUE,
prop_noise_feature=0.4,
noise_level=0.5)
U <- factorU$factor_matrix
V <- factorV$factor_matrix
count_data <- generate_count_matrix(n, p, K, U, V,
ZI=TRUE, prob1=rep(0.5,p))
X <- count_data$X
## or use your own data as a count matrix
## of dimension cells x genes (individuals x features)
write.table(X, file = ".\\out.csv")
#dat <- read.csv(file="C:\\Users\\Gasper\\Documents\\Faks\\3. Letnik\\2. semester\\DS\\orange-imputation-module\\data\\ccp_normCounts_mESCquartz.counts.cycle_genes.csv", header = TRUE)
dat <- read.csv(file = ".\\out.csv")
View(dat)
View(dat)
## or use your own data as a count matrix
## of dimension cells x genes (individuals x features)
write.table(X, file = ".\\out.csv",row.names=FALSE, na="",col.names=FALSE, sep=",")
#dat <- read.csv(file="C:\\Users\\Gasper\\Documents\\Faks\\3. Letnik\\2. semester\\DS\\orange-imputation-module\\data\\ccp_normCounts_mESCquartz.counts.cycle_genes.csv", header = TRUE)
dat <- read.csv(file = ".\\out.csv")
View(dat)
class(dat)
#dat <- dat[,-1]
#fat <- as.matrix(dat[-c(1, 2), ])
storage.mode(dat) <- "integer"
View(dat)
dat <- as.matrix(dat)
#maxCords <- max(fat)
#t <- fat[!complete.cases(fat),]
#fat <- fat[,-1]
#fat <- na.omit(fat)
## run pCMF algorithm
res1 <- pCMF(X, K=2, verbose=FALSE, zero_inflation = FALSE,
sparsity = FALSE, ncores=8)
pwd()
wd()
getwd()
dat <- read.csv(file="C:\\Users\\Gasper\\Documents\\Faks\\3. Letnik\\2. semester\\DS\\orange-imputation-module\\data\\ccp_normCounts_mESCquartz.counts.cycle_genes.csv", header = TRUE)
dat <-dat[-c(1, 2), -1]
View(dat)
class(dat)
View(dat)
tat <- read.csv(file = ".\\out.csv")
View(tat)
View(tat)
fdt <- as.matrix(dat)
## generate data
library("pCMF")
dat <- read.csv(file="C:\\Users\\Gasper\\Documents\\Faks\\3. Letnik\\2. semester\\DS\\orange-imputation-module\\data\\ccp_normCounts_mESCquartz.counts.cycle_genes.csv", header = TRUE)
dat <-dat[-c(1, 2), -1]
fdt <- as.matrix(dat)
matrix(sample.int(15, 9*100, TRUE), 9, 100)
matrix(sample.int(1, 9*100, TRUE), 9, 100)
matrix(sample.int(c(0:1), 9*100, TRUE), 9, 100)
matrix(sample(c(0:1), 9*100, TRUE), 9, 100)
matrix(sample(c(0:1), 9*100, TRUE), 9, 100)
matrix(sample.int(1, 9*100, TRUE), 9, 100)
matrix(sample.int(1, 9*100, TRUE), 9, 100)
matrix(sample(c(0:1), 9*100, TRUE), 9, 100)*matrix(sample.int(1, 9*100, TRUE), 9, 100)
matrix(sample(c(0:1), 9*100, TRUE), 9, 100)%*5matrix(sample.int(1, 9*100, TRUE), 9, 100)
matrix(sample(c(0:1), 9*100, TRUE), 9, 100)%*%matrix(sample.int(1, 9*100, TRUE), 9, 100)
matrix(sample(c(0:1), 9*100, TRUE), 9, 100)%*%matrix(sample.int(15, 9*100, TRUE), 9, 100)
matrix(sample(c(0:1), 9*100, TRUE), 9, 100)%*%matrix(sample.int(15, 9*100, TRUE), 100, 100)
matrix(sample(c(0:1), 9*100, TRUE), 9, 100)%*%matrix(sample.int(15, 9*100, TRUE), 100, 5)
matrix(sample(c(0:1), 9*100, TRUE), 9, 100)%*%matrix(sample.int(15, 5*100, TRUE), 100, 5)
matrix(sample(c(0:1), 9*100, TRUE), 9, 100)%*%matrix(sample.int(15, 5*100, TRUE), 100, 9)
matrix(sample(c(0:1), 9*100, TRUE), 9, 100)%*%matrix(sample.int(15, 5*100, TRUE), 100, 9)
matrix(sample(c(0:1), 9*100, TRUE), 9, 100)%*%matrix(sample.int(15, 9*100, TRUE), 100, 9)
matrix(sample(c(0:1), 9*100, TRUE), 9, 10)%*%matrix(sample.int(15, 9*100, TRUE), 10, 9)
matrix(sample(c(0:1), 9*100, TRUE), 9, 10)*matrix(sample.int(15, 9*100, TRUE), 10, 9)
matrix(sample(c(0:1), 9*100, TRUE), 9, 10).*matrix(sample.int(15, 9*100, TRUE), 10, 9)
matrix(sample(c(0:1), 9*100, TRUE), 9, 10)*matrix(sample.int(15, 9*100, TRUE), 9, 10)
matrix(sample(c(0:1), 9*100, TRUE), 9, 10)*matrix(sample.int(15, 9*100, TRUE), 9, 10)
matrix(sample(c(1), 34*561, TRUE), 34, 561)*matrix(sample.int(1, 34*561, TRUE), 34, 561)
matrix(sample(c(0:1), 9*100, TRUE), 9, 10).*matrix(sample.int(15, 9*100, TRUE), 10, 9)
matrix(sample(c(1), 34*561, TRUE), 34, 561)*matrix(sample.int(1, 34*561, TRUE), 34, 561)
matrix(sample(c(01), 34*561, TRUE), 34, 561)*matrix(sample.int(1, 34*561, TRUE), 34, 561)
matrix(sample(c(0, 1), 3*10, TRUE), 3, 10)*matrix(sample.int(1, 3*10, TRUE), 3, 10)
a <- matrix(sample(c(0, 1), 3*10, TRUE), 3, 10)*matrix(sample.int(1, 3*10, TRUE), 3, 10)
a
colSums(a != 0)
colSums(a == 0)
colSums(a != 0)
colSums(a != 0) > 0
which(a)
which((colSums(a != 0) > 0)
)
which(!((colSums(a != 0) > 0))
which(!(colSums(a != 0) > 0))
)
which(!(colSums(a != 0) > 0)))
which(!(colSums(a != 0) > 0))
add_column(dataset, d = 4:8, .after = 2)
add_column(a, d = 4:8, .after = 2)
which(!(colSums(a != 0) > 0))
!(colSums(a != 0) > 0)
ifelse((colSums(a != 0) > 0), c(0), a
)
a
ifelse((colSums(a != 0) > 0), c(0), a)
ifelse(c(TRUE, FALSE), C(1, 2), C(0, 0))
CBIND(ifelse(c(TRUE, FALSE), C(1, 2), C(0, 0)))
cbind(ifelse(c(TRUE, FALSE), C(1, 2), C(0, 0)))
cbind(ifelse(c(TRUE, FALSE), C(1), C(0))
)
!(colSums(a != 0) > 0)
which(!(colSums(a != 0) > 0))
which((colSums(a != 0) > 0))
integer(3)
t(integer(3))
t(t(integer(3)))
matrix(0, nrow= 2, ncol = 3)
dim(a)
matrix(0, nrow= dim(a)[0], ncol = dim(a)[1])
matrix(0, nrow= dim(a), ncol = dim(a)[1])
matrix(0, nrow= dim(a), ncol = dim(a))
matrix(0, nrow= dim(a), ncol = dim(a)[1])
matrix(0, nrow= dim(a), ncol = dim(a)[,1])
matrix(0, nrow= dim(a), ncol = dim(a))
dim(a)
dim(a)[0]
dim(a)[0, ]
sort(c(1, 3, 2))
which((colSums(a != 0) > 0))
t(which((colSums(a != 0) > 0)))
library(ggplot2)
setwd("C:\\Users\\Gasper\\Documents\\Faks\\3. Letnik\\2. semester\\DS\\orange-imputation-module")
dat1 = read.csv("correlation.csv", header = TRUE)
dat1 <- as.data.frame(dat1[-c(1, 2), -2])
dat <- as.matrix(dat1)
storage.mode(dat) <- "numeric"
d <- density(dat, main="title", xlab="x-axis label") # returns the density data
plot(d) # plots the results
ggplot(dat1)
ggplot(t(dat1)
ggplot(t(dat1)
d <- density(dat) # returns the density data
plot(d) # plots the results
library(ggplot2)
setwd("C:\\Users\\Gasper\\Documents\\Faks\\3. Letnik\\2. semester\\DS\\orange-imputation-module")
dat1 = read.csv("correlation.csv", header = TRUE)
dat1 <- as.data.frame(dat1[-c(1, 2), -2])
dat <- as.matrix(dat1)
storage.mode(dat) <- "numeric"
d <- density(dat) # returns the density data
plot(d, main="title", xlab="x-axis label") # plots the results
plot(d, main="title", xlab="Spearman") # plots the results
setwd("C:\\Users\\Gasper\\Documents\\Faks\\3. Letnik\\2. semester\\DS\\orange-imputation-module")
dat1 = read.csv("correlation.csv", header = TRUE)
dat1 <- as.data.frame(dat1[-c(1, 2), -2])
dat <- as.matrix(dat1)
storage.mode(dat) <- "numeric"
d <- density(dat) # returns the density data
plot(d, main="forma distriucij", xlab="Spearman") # plots the results
setwd("C:\\Users\\Gasper\\Documents\\Faks\\3. Letnik\\2. semester\\DS\\orange-imputation-module")
dat1 = read.csv("correlation.csv", header = TRUE)
dat1 <- as.data.frame(dat1[-c(1, 2), -2])
dat <- as.matrix(dat1)
storage.mode(dat) <- "numeric"
d <- density(dat) # returns the density data
plot(d, main="format distriucij", xlab="Spearman") # plots the results
